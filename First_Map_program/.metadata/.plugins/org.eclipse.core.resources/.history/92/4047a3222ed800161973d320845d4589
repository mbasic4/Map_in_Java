package module3;

//Java utilities libraries
import java.util.ArrayList;
//import java.util.Collections;
//import java.util.Comparator;
import java.util.List;
import java.awt.*;

//Processing library
import processing.core.PApplet;

//Unfolding libraries
import de.fhpotsdam.unfolding.UnfoldingMap;
import de.fhpotsdam.unfolding.marker.Marker;
import de.fhpotsdam.unfolding.data.PointFeature;
import de.fhpotsdam.unfolding.geo.Location;
import de.fhpotsdam.unfolding.marker.SimplePointMarker;
import de.fhpotsdam.unfolding.providers.Google;
import de.fhpotsdam.unfolding.providers.EsriProvider;
import de.fhpotsdam.unfolding.providers.MBTilesMapProvider;
import de.fhpotsdam.unfolding.utils.MapUtils;

//Parsing library
import parsing.ParseFeed;

/** EarthquakeCityMap
 * An application with an interactive map displaying earthquake data.
 * Author: UC San Diego Intermediate Software Development MOOC team
 * @author Marina Bašiæ
 * Date: July 17, 2015
 * */

public class EarthquakeCityMap extends PApplet {

	// You can ignore this.  It's to keep eclipse from generating a warning.
	private static final long serialVersionUID = 1L;

	// IF YOU ARE WORKING OFFLINE, change the value of this variable to true
	private static final boolean offline = false;
	
	// Less than this threshold is a light earthquake
	public static final float THRESHOLD_MODERATE = 5;
	// Less than this threshold is a minor earthquake
	public static final float THRESHOLD_LIGHT = 4;

	/** This is where to find the local tiles, for working without an Internet connection */
	public static String mbTilesString = "blankLight-1-3.mbtiles";
	
	// The map
	private UnfoldingMap map;
	
	//feed with magnitude 2.5+ Earthquakes
	private String earthquakesURL = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_week.atom";

	
	public void setup() {
		size(1250, 650);//, OPENGL);

		if (offline) {
		    map = new UnfoldingMap(this, 200, 50, 700, 500, new MBTilesMapProvider(mbTilesString));
		    earthquakesURL = "2.5_week.atom"; 	// Same feed, saved Aug 7, 2015, for working offline
		}
		else {
			map = new UnfoldingMap(this, 0, 0, 600, 400, new EsriProvider.WorldTopoMap());//Google.GoogleMapProvider());
			// IF YOU WANT TO TEST WITH A LOCAL FILE, uncomment the next line
			//earthquakesURL = "2.5_week.atom";	
		}
		
		map.zoomAndPanTo(2, new Location(48.0f, - 75.0f));
	    //map.zoomToLevel(2);
		
	    MapUtils.createDefaultEventDispatcher(this, map);	
			
	    // The List you will populate with new SimplePointMarkers
	    List<Marker> markers = new ArrayList<Marker>();
	    int counter = 0;


	    //Use provided parser to collect properties for each earthquake
	    //PointFeatures have a getLocation method
	    List<PointFeature> earthquakes = ParseFeed.parseEarthquake(this, earthquakesURL);
	    
	    // These print statements show you (1) all of the relevant properties 
	    // in the features, and (2) how to get one property and use it
	    //if (earthquakes.size() > 0) {
	    	//PointFeature f = earthquakes.get(0);
	    	//System.out.println(f.getProperties());
	    	//Object magObj = f.getProperty("magnitude");
	    	//float mag = Float.parseFloat(magObj.toString());
	    	// PointFeatures also have a getLocation method
	    
	    
	    // Here is an example of how to use Processing's color method to generate 
	    // an int that represents the color yellow.  
	    int yellow = color(255, 255, 0);
	    int red = color(255, 0, 0);
	    int blue = color(0, 0, 255);
	    int black = color(0, 0, 0);
	    
	    
	    //TODO: Add code here as appropriate
	    for (PointFeature feature: earthquakes){
	    	markers.add(new SimplePointMarker(feature.getLocation()));
	    	
	    	for (Marker mk: markers){

	    		PointFeature f = earthquakes.get(counter);
		    	Object magObj = f.getProperty("magnitude");
		    	float mag = Float.parseFloat(magObj.toString());
		    	//System.out.println(f.getProperties());
		    	counter++;
		    	
	    		if (mag < 4.0){
	    			mk.setColor(blue);
	    			mk.setStrokeColor(black);
	    			mk.setStrokeWeight(2);
	    		}
	    		else if ((mag > 4.0) && (mag < 4.9)){
	    			mk.setColor(yellow);
	    			mk.setStrokeColor(black);
	    			mk.setStrokeWeight(2);
	    		}
	    		else{
	    			mk.setColor(red);
	    			mk.setStrokeColor(black);
	    			mk.setStrokeWeight(2);
	    		}
	    	}
	    counter = 0;
	    map.addMarkers(markers);
	    }
	    }
		
	// A suggested helper method that takes in an earthquake feature and 
	// returns a SimplePointMarker for that earthquake
	// TODO: Implement this method and call it from setUp, if it helps
	//public SimplePointMarker createMarker(PointFeature feature)
	//{

		// finish implementing and use this method, if it helps.
		//return new SimplePointMarker(feature.getLocation());
		
	//}
	
	

	public void draw() {
	    background(10);
	    map.draw();
	    addKey();
	}


	// helper method to draw key in GUI
	// TODO: Implement this method to draw the key
	private void addKey() 
	{	
		fill(255, 255, 255);
		//rect(7*(width/8) - 40, 20, width/7, 400, 6);
		rect(width - 10, 20, 180, 400, 6);
		fill(0, 0, 0);
		textSize(14);
		text("Earthquake Locations", 7*(width/8) - 15, 50, width/10, height);
		textSize(12);
		text("- (minor) magnitude less than 4.0", 7*(width/8), 137, width/10, height);
		text("- (light) magnitude between 4.0 and 4.9", 7*(width/8), 227, width/10, height);
		text("- (moderate to great) magnitude greater than 5.0", 7*(width/8), 317, width/10, height);
		fill(0, 0, 255);
		ellipse(7*(width/8) - 15, 145, 10, 10);
		fill(255, 255, 0);
		ellipse(7*(width/8) - 15, 235, 10, 10);
		fill(255, 0, 0);
		ellipse(7*(width/8) - 15, 325, 10, 10);
		// Remember you can use Processing's graphics methods here
	
	}
}
